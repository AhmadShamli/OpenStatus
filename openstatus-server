#!/usr/bin/python

import socket, signal, os, sys, atexit, time, getopt, sqlite3, smtplib, logging
from configobj import ConfigObj, ConfigObjError
from validate import Validator
from time import time

from twisted.internet.protocol import Protocol, Factory
from twisted.protocols.policies import TimeoutMixin
from twisted.internet import reactor

class handler(Protocol, TimeoutMixin):
	def connectionMade(self):
		self.setTimeout(5)
	def dataReceived(self, data):
		processData(data, self.transport.getPeer())

logger = logging.getLogger('openstatus-server')
hdlr = logging.FileHandler('/var/log/openstatus-server.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
logger.addHandler(hdlr) 
logger.setLevel(logging.INFO)
ch  = logging.StreamHandler()
logger.addHandler(ch)

try:
	import setproctitle
	setproctitle.setproctitle('openstatus-server')
except ImportError:
	logger.debug('setproctitle not found')
try:       
	import json
except:
	try:     
		import simplejson as json
	except ImportError:
		logger.error('Could not import json module')
		sys.exit(1)

debug = False
configfile = '/etc/openstatus/openstatus-server.conf'
try:
	options, remainder = getopt.getopt(sys.argv[1:], 'dc:', ['debug',])
except getopt.GetoptError:
	print "usage: ",sys.argv[0]," [-c configfile] [-d | --debug]"
	sys.exit(2)

for opt, args in options:
	if opt in ('-d', '--debug'):
		debug = True
	elif opt in ('-c'):
		if args in ('-d', '--debug'):
			print "usage: ", sys.argv[0]," [-c configfile] [-d | --debug]"
			sys.exit(2)
		configfile = args

if debug == True:
	logger.setLevel(logging.DEBUG)

# Let's make this a daemon... this is a very basic daemon fork, taken from: http://code.activestate.com/recipes/66012-fork-a-daemon-process-on-unix/#c9
# Do the first fork
def daemonize(stdout, stderr, stdin, pidfile, startmsg = 'OpenStatus started with pid %s' ):

	try:
		pid = os.fork()
		if pid > 0: sys.exit(0) # Exit first parent.
	except OSError, e:
		logger.error("fork #1 failed: (%d) %s" % (e.errno, e.strerror))
		sys.exit(1)

	# Decouple from parent environment.
	#os.chdir("/") # I don't think this is necessary, and it just breaks relative pathnames with the -c switch
	os.umask(0)
	os.setsid()

	# Do second fork.
	try:
		pid = os.fork()
		if pid > 0: sys.exit(0) # Exit second parent.
	except OSError, e:
		logger.error("fork #2 failed: (%d) %s" % (e.errno, e.strerror))
		sys.exit(1)

	# Open file descriptors and print start message
	if not stderr: stderr = stdout
	si = file(stdin, 'r')
	so = file(stdout, 'a+')
	se = file(stderr, 'a+', 0)
	pid = str(os.getpid())

	logger.info("%s using config file %s" % (startmsg, configfile) % pid)
	if pidfile: file(pidfile,'w+').write("%s" % pid)
	if debug == False:
		logger.removeHandler(ch)
	# Redirect standard file descriptors.
	os.dup2(si.fileno(), sys.stdin.fileno())
	os.dup2(so.fileno(), sys.stdout.fileno())
	os.dup2(se.fileno(), sys.stderr.fileno())

def sendAlert(level, subject, body):
	global config
	levellower = level.lower()
	if config[levellower].has_key("email") or config[levellower]['type'] == "email":
		if config[levellower]['type'] == "email":
			receiver = config[levellower]['address']
		else:
			receiver = config[levellower]['email']
		msg = ("From: %s\rTo: %s\rSubject: %s\r\r%s" %(config['server']['email_from'], receiver, subject, body))
		s = smtplib.SMTP('localhost')
		sender = config['server']['email_from']
		s.sendmail(sender, [receiver], msg)
		s.quit()
	elif config[levellower].has_key("type") and config[levellower]['type'] == "command":
		if config[levellower].has_key("sendbody") and config[levellower]["sendbody"] == "true":
			os.system('%s "%s"' % (config[levellower]['command'], body))
		else:
			os.system('%s' % (config[levellower]['command']))
	elif config[levellower].has_key("type") and config[levellower]['type'] == "net":
		try:
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			s.connect((config[levellower]['ip'], int(config[levellower]['port'])))
			s.sendall(body)
			s.close()
		except socket.error, (errno, strerror):
			logger.warning('Could send alerrt to server %s:%d: %s' % (config[levellower]['ip'], config[levellower]['port'], strerror))
def alert(hostname, ip, module, level, value, setstatus = False):

	# Let's insert this alert into the database
	sql.execute('SELECT * FROM servers WHERE hostname = ?', [hostname])
	server = sql.fetchone()

	alertinfo = (server['uid'], module, level, int(time()), value, 0)
	alertcheck = (server['uid'], module, level, int(time()-3600), 0)
	sql.execute('SELECT * FROM alerts WHERE server_uid = ? AND module = ? AND level = ? AND alert_time > ? AND acked = ?', alertcheck)
	alerts = 0
	for row in sql:
		alerts += 1

	if (alerts < 1):
		sql.execute('INSERT INTO alerts (server_uid, module, level, alert_time, value, acked) VALUES (?, ?, ?, ?, ?, ?)', alertinfo)
		if (setstatus == True):
			sql.execute('UPDATE servers SET status = 0 WHERE uid = ?', (server['uid'], ))
		title = "OpenStatus alert on server %s" % hostname
		message = "A problem was detected with a server monitored by OpenStatus. Server: %s Module: %s Alert Level: %s Value: %s" % (hostname, module, level, value)
	
		sendAlert(level, title, message)

def sigHdl(signum, frm):
	global s
	if signum == signal.SIGTERM:
		logger.critical('Received SIGTERM... Exiting.')
		try:
			s.close()
		except:
			logger.debug('No connection to close')
		os._exit(0)
	else:
		logger.critical('Received signal %s... Exiting.' % (signum))
		try:
			s.close()
		except:
			logger.debug('No connection to close')
		os._exit(0)

def checkServers():

	# Let's check each server in the database to see when we last heard from it.
	sql.execute('SELECT * FROM servers WHERE disabled = 0')
	for row in sql:
		if (row['time'] < (int(time()) - 300)):
			alert(row['hostname'], '0.0.0.0', 'Server Status', 'Critical', 'Down', True)

def getConfig():

	global config, configfile

	cfg = """
	[server]
	listen_ip = ip_addr(default='0.0.0.0')
	port = integer(min=1, max=65535, default=12999)
	email_from = string(default='root@localhost')
	[warning]
	[critical]
	"""
	try:
		config = ConfigObj(configfile, file_error = True, configspec=cfg.split('\n'), list_values=False)
	except (ConfigObjError, IOError), e:
		logger.error('%s' % (e))
		try:
			configfile = '/etc/openstatus/openstatus-server.conf'
			config = ConfigObj(configfile, file_error = True, configspec=cfg.split(''), list_values=False)
		except (ConfigObjError, IOError), e:
			logger.error('%s' % (e))
			logger.error('Exiting...')
			sys.exit(3)
	validator = Validator()
	result = config.validate(validator)
	if result != True:
		logger.error('Config file validation failed!')
		sys.exit(1)

def dbConnect():

	db = sqlite3.connect('/etc/openstatus/openstatus.db', check_same_thread = False, isolation_level=None)
	db.row_factory=sqlite3.Row
	global sql
	sql = db.cursor()

def processData(data, addr):
	# This huge block of indented try except else statements could probably be done better
	try: # Make sure it's actually json that got sent
		data = json.loads(data)
	except ValueError:
		logger.error('JSON error from %s' % (addr.host))
	else:
		logger.debug('Received JSON from %s: %s' % (addr.host, data))
		try: # Check that there's a hostname defined
			host = data['hostname']
		except KeyError:
			logger.error('No hostname in json from %s' % (addr.host))
		else:
			try: # Let's see if we have a server with this IP
				sql.execute('SELECT * FROM servers WHERE ip = ?', [addr.host])
			except sqlite3.OperationalError, msg:
				logger.error(msg, "")
			else:
				server = sql.fetchone()
				if (server != None):
					data['time'] = time.time()
					try:
						ins = (data['time'], 1, data['uptime']['uptime'], data['ram']['total'], data['ram']['used'], data['ram']['free'], data['ram']['bufcac'], data['disk']['total']['total'], data['disk']['total']['used'], data['disk']['total']['avail'], data['uptime']['load1'], data['uptime']['load5'], data['uptime']['load15'], data['transfer']['rx'], data['transfer']['tx'], server['uid'])
					except KeyError, e:
						logger.error('Missing %s data from %s, ignoring...' % ( e, addr.host))
					else:	
						sql.execute('BEGIN TRANSACTION')
						# Round down to the minute, 5 minute, and 10 minute intervals
						roundedtime = int((data['time'] // 60) * 60)
						roundedtime5 = int((data['time'] // 300) * 300)
						roundedtime10 = int((data['time'] // 600) * 600)
						
						history = (roundedtime, data['ram']['total'], data['ram']['used'], data['ram']['free'], data['ram']['bufcac'], data['disk']['total']['total'], data['disk']['total']['used'], data['disk']['total']['avail'], data['uptime']['load1'], data['uptime']['load5'], data['uptime']['load15'], data['transfer']['rx'], data['transfer']['tx'], server['uid'])
						sql.execute('UPDATE servers SET time = ?, status = ?, uptime = ?, mtotal = ?, mused = ?, mfree = ?, mbuffers = ?, disktotal = ?, diskused = ?, diskfree = ?, load1 = ?, load5 = ?, load15 = ?, rx = ?, tx = ? WHERE uid = ?', ins)
						sql.execute('INSERT INTO history (time, mtotal, mused, mfree, mbuffers, disktotal, diskused, diskfree, load1, load5, load15, rx, tx, uid) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', history)

						sql.execute('SELECT * FROM history WHERE time = ? and uid = ? LIMIT 1', (roundedtime, server['uid']))
						hist1 = sql.fetchone()
						if roundedtime == roundedtime5: # The minute we got is on a 5-minute boundary
							sql.execute('INSERT INTO history5 (time, mtotal, mused, mfree, mbuffers, disktotal, diskused, diskfree, load1, load5, load15, rx, tx, uid) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', history)
						else:
							sql.execute('SELECT * FROM history5 WHERE time = ? AND uid = ? LIMIT 1', (roundedtime5, server['uid']))
							hist5 = sql.fetchone()
							if hist5 == None:
								sql.execute('INSERT INTO history10 (time, mtotal, mused, mfree, mbuffers, disktotal, diskused, diskfree, load1, load5, load15, rx, tx, uid) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', history)
							else:
								hist5out = {}
								for key in hist5.keys():
									if key != "uid" and key != "time":
										if hist1[key] > hist5[key]:
											hist5out[key] = hist1[key]
										else:
											hist5out[key] = hist5[key]
								sql.execute('UPDATE history5 SET mtotal = ?, mused = ?, mfree = ?, mbuffers = ?, disktotal = ?, diskused = ?, diskfree = ?, load1 = ?, load5 = ?, load15 = ?, rx = ?, tx = ? WHERE uid = ? AND time = ?', (hist5out['mtotal'], hist5out['mused'], hist5out['mfree'], hist5out['mbuffers'], hist5out['disktotal'], hist5out['diskused'], hist5out['diskfree'], hist5out['load1'], hist5out['load5'], hist5out['load15'], hist5out['rx'], hist5out['tx'], server['uid'], roundedtime5))

						if roundedtime == roundedtime10: # The minute we got is on a 10 minute boundary
							sql.execute('INSERT INTO history10 (time, mtotal, mused, mfree, mbuffers, disktotal, diskused, diskfree, load1, load5, load15, rx, tx, uid) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', history)
						else:
							sql.execute('SELECT * FROM history10 WHERE time = ? AND uid = ? LIMIT 1', (roundedtime10, server['uid']))
							hist10 = sql.fetchone()
							if hist10 == None:
								sql.execute('INSERT INTO history10 (time, mtotal, mused, mfree, mbuffers, disktotal, diskused, diskfree, load1, load5, load15, rx, tx, uid) VALUES( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', history)
							else:
								hist10out = {}
								for key in hist10.keys():
									if key != "uid" and key != "time":
										if hist1[key] > hist10[key]:
											hist10out[key] = hist1[key]
										else:
											hist10out[key] = hist10[key]
								sql.execute('UPDATE history10 SET mtotal = ?, mused = ?, mfree = ?, mbuffers = ?, disktotal = ?, diskused = ?, diskfree = ?, load1 = ?, load5 = ?, load15 = ?, rx = ?, tx = ? WHERE uid = ? AND time = ?', (hist10out['mtotal'], hist10out['mused'], hist10out['mfree'], hist10out['mbuffers'], hist10out['disktotal'], hist10out['diskused'], hist10out['diskfree'], hist10out['load1'], hist10out['load5'], hist10out['load15'], hist10out['rx'], hist10out['tx'], server['uid'], roundedtime10))

						# Let's temporarily set all processes to unknown (-1) status
						sql.execute('UPDATE processes SET status = ? WHERE uid = ?', (-1, server['uid']))
						if "procs" in data:
							for proc in data['procs']:
								upd = (data['procs'][proc]['status'], server['uid'], data['procs'][proc]['name'])
								sql.execute('UPDATE processes SET status = ? WHERE uid = ? AND name = ?', upd)
								sql.execute('SELECT COUNT(*) FROM processes WHERE uid = ? AND name = ?', (server['uid'], data['procs'][proc]['name']))
								procexists = sql.fetchone()
								if procexists[0] != 0:
									if data['procs'][proc]['status'] == 1: alert(server['hostname'], addr, data['procs'][proc]['name'], "Warning", "Down")
									elif data['procs'][proc]['status'] == 2: alert(server['hostname'], addr, data['procs'][proc]['name'], "Critical", "Down")
						if "commands" in data:
							for com in data['commands']:
								# These are handled the same way as process checks because it makes it so much easier, and they're pretty much the same anyways
								upd = (data['commands'][com]['status'], server['uid'], data['commands'][com]['name'])
								sql.execute('UPDATE processes SET status = ? WHERE uid = ? AND name = ?', upd)
								sql.execute('SELECT COUNT(*) FROM processes WHERE uid = ? AND name = ?', (server['uid'], data['procs'][proc]['name']))
								procexists = sql.fetchone()
								if procexists[0] != 0:
									if data['commands'][com]['status'] == 1: alert(server['hostname'], addr, data['commands'][com]['name'], "Warning", data['commands'][com]['value'])
									elif data['commands'][com]['status'] == 2: alert(server['hostname'], addr, data['commands'][com]['name'], "Critical", data['commands'][com]['value'])
						if data['ram']['status'] != 0:
							if data['ram']['status'] == 1: alert(server['hostname'], addr, 'Memory', 'Warning', data['ram']['used'])
							elif data['ram']['status'] == 2: alert(server['hostname'], addr, 'Memory', 'Critical', data['ram']['used'])

						if data['disk']['total']['status'] != 0:
							diskpercent = int(server['disk']['total']['used']) / int(server['disk']['total']['avail'])
							if data['disk']['total']['status'] == 1: alert(server['hostname'], addr, 'Disk', 'Warning', diskpercent)
							elif data['disk']['total']['status'] == 2: alert(server['hostname'], addr, 'Disk', 'Critial', diskpercent)
						if data['uptime']['status'] != 0:
							if data['uptime']['status'] == 1: alert(server['hostname'], addr, 'Load', 'Warning', data['uptime']['load1'])
							elif data['uptime']['status'] == 2: alert(server['hostname'], addr, 'Load', 'Critical', data['uptime']['load1'])
						if data['transfer']['rx-status'] != 0:
							if data['transfer']['rx-status'] == 1: alert(server['hostname'], addr, 'Transfer (RX)', 'Warning', data['transfer']['rx'])
							elif data['transfer']['rx-status'] == 2: alert(server['hostname'], addr, 'Transfer (RX)', 'Critical', data['transfer']['rx'])
						if data['transfer']['tx-status'] != 0:
							if data['transfer']['tx-status'] == 1: alert(server['hostname'], addr, 'Transfer (TX)', 'Warning', data['transfer']['tx'])
							elif data['transfer']['tx-status'] == 2: alert(server['hostname'], addr, 'Transfer (TX)', 'Critical', data['transfer']['tx'])
						sql.execute('END TRANSACTION')
						# This should be done on a timer, but if I do that, I have to use another thread, which more than doubles the memory usage.
						# So, instead, I'm going to do it whenever any other server updates.
						checkServers()

def main():
	
	getConfig()
	dbConnect()
	
	TCP_IP = config['server']['listen_ip']
	TCP_PORT = int(config['server']['port'])
	
	f = Factory()
	f.protocol = handler
	reactor.listenTCP(TCP_PORT, f, interface=TCP_IP)
	reactor.run()

if __name__ == "__main__":

	signal.signal(signal.SIGTERM, sigHdl)
	signal.signal(signal.SIGHUP, sigHdl)
	signal.signal(signal.SIGINT, sigHdl)
	if debug == False:
		daemonize('/var/log/openstatus-server.log', '/var/log/openstatus-server.log', '/dev/null', '/var/run/openstatus-server.pid')
		main()
	elif debug == True:
		logger.info("OpenStatus started in debug mode with PID %s using config file %s" % (os.getpid(), configfile))
		main()
