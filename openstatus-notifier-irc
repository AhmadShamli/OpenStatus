#!/usr/bin/python

TCP_IP = '127.0.0.1'
TCP_PORT = 12998

SERVER_ADDR = "your.favorite.irc.network"
SERVER_PORT = 6667
CHANNEL = "#YourChannel"
NICK = "OpenStatus"

##############################################################
# NOTHING TO EDIT BELOW THE LINE!!!
##############################################################

from twisted.internet.protocol import Protocol, Factory
from twisted.protocols.policies import TimeoutMixin
from twisted.internet import reactor
import irclib, os, sys, time
from threading import Thread


try:
    import setproctitle
    setproctitle.setproctitle('openstatus-irc')
except ImportError, e:
    print e
    pass

debug = False

class doIRC():
    def __init__(self):
        global SERVER_ADDR, SERVER_PORT, CHANNEL, NICK, server
        # Create an IRC object
        irc = irclib.IRC()

        # Create a server object, connect and join the channel
        server = irc.server()
        server.connect (SERVER_ADDR, SERVER_PORT, NICK)
	time.sleep(5)
        server.join(CHANNEL)

        # Jump into an infinite loop
        irc.process_forever()

class handler(Protocol, TimeoutMixin):
    global server, CHANNEL
    def connectionMade(self):
        self.setTimeout(5)
    def dataReceived(self, data):
        server.privmsg(CHANNEL, data)


# Let's make this a daemon... this is a very basic daemon fork, taken from: http://code.activestate.com/recipes/66012-fork-a-daemon-process-on-unix/#c9
# Do the first fork
def daemonize(stdout, stderr, stdin, pidfile, startmsg = 'OpenStatus IRC notifier started with pid %s' ):

    try:
        pid = os.fork()
        if pid > 0: sys.exit(0) # Exit first parent.
    except OSError, e:
        print e
        sys.exit(1)

    # Decouple from parent environment.
    #os.chdir("/") # I don't think this is necessary, and it just breaks relative pathnames with the -c switch
    os.umask(0)
    os.setsid()

    # Do second fork.
    try:
        pid = os.fork()
        if pid > 0: sys.exit(0) # Exit second parent.
    except OSError, e:
        print e
        sys.exit(1)

    # Open file descriptors and print start message
    if not stderr: stderr = stdout
    si = file(stdin, 'r')
    so = file(stdout, 'a+')
    se = file(stderr, 'a+', 0)
    pid = str(os.getpid())

    if pidfile: file(pidfile,'w+').write("%s" % pid)

    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def main():
    global TCP_IP, TCP_PORT, t1

    t1 = Thread(target=doIRC)
    t1.start()
    f = Factory()
    f.protocol = handler
    reactor.listenTCP(TCP_PORT, f, interface=TCP_IP)
    reactor.run()
    

if __name__ == "__main__":
    if debug == False:
        daemonize('/var/log/openstatus-irc.log', '/var/log/openstatus-irc.log', '/dev/null', '/var/run/openstatus-irc.pid')
        main()
    elif debug == True:
        main()
