#!/usr/bin/python

TCP_IP = '127.0.0.1'
TCP_PORT = 12998
SEND_TO = "your_xmpp_id@domain.com"
USERNAME = "xmpp_bot_username"
DOMAIN = "domain.com" # Bot's domain name
PASSWORD = "botpassword"
SERVER_ADDR = "your.xmpp.server.address"
SERVER_PORT = 5223

######################################################
# NOTHING TO EDIT BELOW THIS LINE!!!
######################################################

from twisted.internet.protocol import Protocol, Factory
from twisted.protocols.policies import TimeoutMixin
from twisted.internet import reactor
import xmpp
import os, sys

class handler(Protocol, TimeoutMixin):
    def connectionMade(self):
        self.setTimeout(5)
    def dataReceived(self, data):
        processData(data)

try:
    import setproctitle
    setproctitle.setproctitle('openstatus-xmpp')
except ImportError, e:
    print e
    pass

debug = False

# Let's make this a daemon... this is a very basic daemon fork, taken from: http://code.activestate.com/recipes/66012-fork-a-daemon-process-on-unix/#c9
# Do the first fork
def daemonize(stdout, stderr, stdin, pidfile, startmsg = 'OpenStatus XMPP transport started with pid %s' ):

    try:
        pid = os.fork()
        if pid > 0: sys.exit(0) # Exit first parent.
    except OSError, e:
        print e
        sys.exit(1)

    # Decouple from parent environment.
    #os.chdir("/") # I don't think this is necessary, and it just breaks relative pathnames with the -c switch
    os.umask(0)
    os.setsid()

    # Do second fork.
    try:
        pid = os.fork()
        if pid > 0: sys.exit(0) # Exit second parent.
    except OSError, e:
        print e
        sys.exit(1)

    # Open file descriptors and print start message
    if not stderr: stderr = stdout
    si = file(stdin, 'r')
    so = file(stdout, 'a+')
    se = file(stderr, 'a+', 0)
    pid = str(os.getpid())

    if pidfile: file(pidfile,'w+').write("%s" % pid)

    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

def processData(msg):
    global SEND_TO, client
    message = xmpp.Message(SEND_TO, msg)
    message.setAttr('type', 'chat')
    client.send(message)

def main():
    print "Main started"    

    global client, TCP_IP, TCP_PORT, USERNAME, PASSWORD, SEND_TO, SERVER_ADDR, SERVER_PORT 
    client = xmpp.Client(DOMAIN)
    client.connect(server=(SERVER_ADDR,SERVER_PORT))
    client.auth(USERNAME, PASSWORD, 'openstatus')
    client.sendInitPresence()

    f = Factory()
    f.protocol = handler
    reactor.listenTCP(TCP_PORT, f, interface=TCP_IP)
    reactor.run()

if __name__ == "__main__":
    if debug == False:
        daemonize('/var/log/openstatus-xmpp.log', '/var/log/openstatus-xmpp.log', '/dev/null', '/var/run/openstatus-xmpp.pid')
        main()
    elif debug == True:
        main()
